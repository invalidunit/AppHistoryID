#!/bin/sh -


readonly _command="${0##*/}"
readonly _c_version='0.1.2-3'
export LANG=en_US.UTF-8
_info="$(curl -s -L -H 'Accept: application/vnd.github+json' -H "Authorization: Bearer ${GITHUB_TOKEN}" "https://api.github.com/repos/${GH_REPO}/issues?state=open")"


if [ -d '/proc/' ]; then
    #openwrt not have ps -p
    _now_sh="$(readlink "/proc/$$/exe")"
    _now_sh="${_now_sh##*/}"
else
    #ios and macos not have "/proc/"
    _now_sh="$(basename "$(echo "$(ps -p $$ -o command=)" | awk '{print $1}')")"
fi
if [ ! -t 0 ]; then
    case "${_now_sh}" in
        dash)
            while IFS= read -r line || [ -n "$line" ]; do
                _incoming="$_incoming$line"'\n'
            done
            _incoming="$(printf '%b\n' "${_incoming}")"
        ;;
        sh)
            if readlink "$(which sh)" | grep -q 'dash$'; then
                while IFS= read -r line || [ -n "$line" ]; do
                    _incoming="$_incoming$line"'\n'
                done
                _incoming="$(printf '%b\n' "${_incoming}")"
            else
                read -d $'\0' -r _incoming
            fi
        ;;
        *)
            read -d $'\0' -r _incoming
        ;;
    esac
fi

_randnum(){
    if [ -z "${2}" ]; then
        tr -dc 'A-Za-z0-9' < /dev/urandom 2>>/dev/null | head -c "${1}"
    else
        tr -dc "${1}" < /dev/urandom 2>>/dev/null | head -c "${2}"
    fi
}

_get_package_version(){
    if [ "${1}" = 'sh' ]; then
        _command2="$(readlink "$(which sh)")"
        _command2="${_command2##*/}"
    else
        _command2="${1}"
    fi
    #If it is not Debian, return the unknown version directly
    if which dpkg 2>>/dev/null 1>>/dev/null; then
        if dpkg -s "${_command2}" 2>>/dev/null 1>>/dev/null; then
            echo "${_command2}/$(dpkg -s "${_command2}" | grep '^Version: ' | sed 's#Version: ##')"
        else
            _command_p="$(which "${_command2}")"
            if ! dpkg -S "${_command_p}" 2>>/dev/null 1>>/dev/null; then
                echo "${_command2}/unknown"
            else
                _command_p="$(dpkg -S "${_command_p}")"
                _command_p="${_command_p##*/}"
                echo "${_command2}/$(dpkg -s "${_command_p}" | grep '^Version: ' | sed 's#Version: ##')"
            fi
        fi
    else
        echo "${_command2}/unknown"
    fi
    unset _command2 _command_p
}

_user_agent="$(_get_package_version 'curl') $(uname -s)/$(uname -r) $(_get_package_version "${_now_sh}") ${_command}/${_c_version}(shell script)"

_remove_colon(){
    if [ -n "${1}" ]; then
        echo "${1}" | sed 's#^"##' | sed 's#"$##'
    else
        while IFS= read -r line || [ -n "$line" ]; do
            _incoming="$_incoming$line"'\n'
        done
        _incoming="$(printf '%b\n' "${_incoming}")"
        echo "${_incoming}" | sed 's#^"##' | sed 's#"$##'
    fi
    unset _incoming
}

mkdir -p "./appid/"
i='1'
i_max="$(echo "${_info}" | jq ".[] | .url" | wc -l)"
if [ "${i_max}" = '0' ]; then
    echo '[*] not found issues...'
else
    while [ "${i}" -le "${i_max}" ]; do
        unset _url _issues_title _app_info _area _id
        _sleep="$(_randnum '0-2' '1')$(_randnum '0-9' '1')"
        echo "[*] wait \"${_sleep}s\""
        sleep "${_sleep}"
        unset _sleep
        _url="$(echo "${_info}" | jq ".[] | .url" | sed -n "${i}p" | _remove_colon)"
        echo "[*] now check: $(echo "${_info}" | jq ".[] | .html_url" | sed -n "${i}p" | _remove_colon)"
        _issues_body="$(echo "${_info}" | jq ".[] | .body" | sed -n "${i}p" | _remove_colon)"
        _id="${_issues_body##*/id}"
        _id="${_id%%\?*}"
        _area="${_issues_body%%/app/*}"
        _area="${_area##*apps.apple.com/}"
        echo "[*] now check \"${_id}\" to \"apps.apple.com\"..."
        _app_info="$(curl -s -L -H "user-agent: ${_user_agent}" "https://itunes.apple.com/${_area}/lookup?id=${_id}" | jq '{resultCount: .resultCount, bundleId: .results[0].bundleId}')"
        if ! echo "${_app_info}" | jq ".resultCount" | grep -qE '0|1'; then
            echo '[x] Wrong information was returned...'
            echo '[*] Skip this...'
            i="$((i+1))"
            continue
        fi
        if echo "${_app_info}" | jq ".resultCount" | grep -q '1' ; then
            echo "[*] Found valid app $(echo "${_app_info}" | jq ".bundleId")"
            echo "[*] Add \"${_id}\" to the scheduled tasks list..."
            echo "${_id}" >>"./appid/${_area}.list"
            curl -s -L -X POST -H 'Accept: application/vnd.github+json' -H "Authorization: Bearer ${GITHUB_TOKEN}" "${_url}/comments" -d "$(jo body="\"${_id}\"($(echo "${_app_info}" | jq ".bundleId" | _remove_colon)) will be added to the scheduled tasks list")" 1>>/dev/null
            curl -s -L -X PATCH -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${GITHUB_TOKEN}" "${_url}" -d '{"state":"closed"}' 1>>/dev/null
        else
            echo "[*] No app information found..."
            curl -s -L -X POST -H 'Accept: application/vnd.github+json' -H "Authorization: Bearer ${GITHUB_TOKEN}" "${_url}/comments" -d "$(jo body="No valid information found")" 1>>/dev/null
            curl -s -L -X PATCH -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${GITHUB_TOKEN}" "${_url}" -d '{"state":"closed"}' 1>>/dev/null
        fi
        i="$((i+1))"
    done
fi
